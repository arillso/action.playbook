name: Docker Tests

on:
    push:
        branches:
            - "main"

    pull_request:
        branches:
            - "main"

    workflow_dispatch:

permissions:
    contents: read
    security-events: write
    pull-requests: write

env:
    IMAGE_NAME: action

jobs:
    docker-lint:
        name: Docker Lint
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Hadolint
              uses: hadolint/hadolint-action@v3.1.0
              with:
                  dockerfile: Dockerfile
                  failure-threshold: error

    docker-build:
        name: Docker Build
        needs: docker-lint
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false
                  load: true
                  tags: ${{ env.IMAGE_NAME }}:test
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Test Docker image
              run: |
                  docker image inspect ${{ env.IMAGE_NAME }}:test

    docker-multi-platform:
        name: Docker Multi-Platform Build
        needs: docker-lint
        runs-on: ubuntu-latest
        timeout-minutes: 30
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build for multiple platforms
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: false
                  tags: ${{ env.IMAGE_NAME }}:multi-test
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    docker-security-scan:
        name: Docker Security Scan
        needs: docker-build
        runs-on: ubuntu-latest
        timeout-minutes: 20
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false
                  load: true
                  tags: ${{ env.IMAGE_NAME }}:scan
                  cache-from: type=gha

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ env.IMAGE_NAME }}:scan
                  format: "sarif"
                  output: "trivy-results.sarif"
                  severity: "CRITICAL,HIGH"

            - name: Upload Trivy scan results to GitHub Security tab
              if: ${{ always() }}
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: "trivy-results.sarif"

    docker-integration-test:
        name: Docker Integration Test
        needs: docker-build
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false
                  load: true
                  tags: ${{ env.IMAGE_NAME }}:integration
                  cache-from: type=gha

            - name: Run integration tests
              run: |
                  if docker run --rm \
                    -v "$(pwd)/tests/integration:/tests" \
                    ${{ env.IMAGE_NAME }}:integration \
                    --playbook /tests/test-playbook.yml \
                    --inventory /tests/inventory.yml; then
                    echo "Integration test passed"
                  else
                    echo "Integration test failed"
                    exit 1
                  fi

    docker-test-in-workflow:
        name: Docker Test in Workflow
        needs: docker-build
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false
                  load: true
                  tags: ${{ env.IMAGE_NAME }}:workflow-test
                  cache-from: type=gha

            - name: Run in workflow test
              run: |
                  if docker run -v "$(pwd):/app" --rm ${{ env.IMAGE_NAME }}:workflow-test \
                  --playbook /app/tests/basic_playbook.yml --inventory /app/tests/hosts.yml --check; then
                    echo "Workflow test passed"
                  else
                    echo "Workflow test failed"
                    exit 1
                  fi

    docker-publish:
        name: Docker Publish
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        needs:
            - docker-build
            - docker-security-scan
            - docker-integration-test
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  tags: |
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=ref,event=branch
                      type=sha

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    test-summary:
        name: Test Summary
        needs:
            - docker-lint
            - docker-build
            - docker-multi-platform
            - docker-security-scan
            - docker-integration-test
            - docker-test-in-workflow
        runs-on: ubuntu-latest
        if: ${{ always() }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Generate Docker test summary
              run: |
                  ./tests/test-summary.sh "Docker" \
                    "Docker Lint=${{ needs.docker-lint.result }}" \
                    "Docker Build=${{ needs.docker-build.result }}" \
                    "Docker Multi-Platform Build=${{ needs.docker-multi-platform.result }}" \
                    "Docker Security Scan=${{ needs.docker-security-scan.result }}" \
                    "Docker Integration Test=${{ needs.docker-integration-test.result }}" \
                    "Docker Test in Workflow=${{ needs.docker-test-in-workflow.result }}"

            - name: Comment on pull request with test results
              if: ${{ github.event_name == 'pull_request' }}
              uses: thollander/actions-comment-pull-request@v3
              with:
                  file-path: ./Docker-results.md
                  comment-tag: docker-test-results
                  mode: upsert
